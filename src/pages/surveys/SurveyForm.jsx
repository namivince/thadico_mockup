import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { 
  Steps, 
  Card, 
  Form, 
  Input, 
  DatePicker, 
  Button, 
  Select, 
  Space, 
  Row, 
  Col,
  Divider,
  Radio,
  InputNumber,
  Checkbox,
  Tag,
  message,
  Modal
} from 'antd';
import { 
  InfoCircleOutlined, 
  QuestionCircleOutlined, 
  TeamOutlined,
  PlusOutlined,
  DeleteOutlined,
  SaveOutlined,
  SendOutlined,
  ArrowLeftOutlined,
  DownloadOutlined,
  BookOutlined,
  CopyOutlined,
  UploadOutlined
} from '@ant-design/icons';
import { useNavigate, useParams } from 'react-router-dom';
import { departments } from '../../data/mockData';
import dayjs from '../../utils/dayjs';
import './SurveyForm.css';

const { Step } = Steps;
const { TextArea } = Input;
const { Option } = Select;
const { RangePicker } = DatePicker;

/**
 * Form t·∫°o/ch·ªânh s·ª≠a kh·∫£o s√°t - Wizard 3 b∆∞·ªõc
 */
const SurveyForm = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const [form] = Form.useForm();
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    // Step 1: Basic Info
    name: '',
    description: '',
    dateRange: null,
    
    // Step 2: Questions
    questions: [
      {
        id: Date.now(),
        type: 'multiple_choice',
        text: '',
        options: [''],
        required: true
      }
    ],
    
    // Step 3: Audience
    audience: {
      departments: [],
      positions: [],
      specificUsers: []
    }
  });

  const isEdit = !!id;

  // Question types
  const questionTypes = [
    { value: 'multiple_choice', label: 'Tr·∫Øc nghi·ªám', icon: '‚òëÔ∏è' },
    { value: 'single_choice', label: 'Ch·ªçn m·ªôt', icon: '‚ö™' },
    { value: 'rating', label: 'ƒê√°nh gi√°', icon: '‚≠ê' },
    { value: 'text', label: 'VƒÉn b·∫£n', icon: 'üìù' },
    { value: 'number', label: 'S·ªë', icon: 'üî¢' }
  ];

  // Steps configuration
  const steps = [
    {
      title: 'Th√¥ng tin c∆° b·∫£n',
      icon: <InfoCircleOutlined />,
      description: 'T√™n, m√¥ t·∫£ v√† th·ªùi gian'
    },
    {
      title: 'C√¢u h·ªèi',
      icon: <QuestionCircleOutlined />,
      description: 'T·∫°o c√°c c√¢u h·ªèi kh·∫£o s√°t'
    },
    {
      title: 'ƒê·ªëi t∆∞·ª£ng',
      icon: <TeamOutlined />,
      description: 'Ch·ªçn ng∆∞·ªùi tham gia'
    }
  ];

  // Handle step navigation
  const nextStep = async () => {
    try {
      await form.validateFields();
      if (currentStep < steps.length - 1) {
        setCurrentStep(currentStep + 1);
      }
    } catch (error) {
      message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  // Handle questions - memoized to prevent unnecessary re-renders
  const addQuestion = useCallback(() => {
    const newQuestion = {
      id: Date.now(),
      type: 'multiple_choice',
      text: '',
      options: [''],
      required: true
    };
    setFormData(prev => ({
      ...prev,
      questions: [...prev.questions, newQuestion]
    }));
  }, []);

  const removeQuestion = (questionId) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.filter(q => q.id !== questionId)
    }));
  };

  const updateQuestion = (questionId, field, value) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.map(q => 
        q.id === questionId ? { ...q, [field]: value } : q
      )
    }));
  };

  const addOption = (questionId) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.map(q => 
        q.id === questionId ? { ...q, options: [...q.options, ''] } : q
      )
    }));
  };

  const removeOption = (questionId, optionIndex) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.map(q => 
        q.id === questionId 
          ? { ...q, options: q.options.filter((_, i) => i !== optionIndex) }
          : q
      )
    }));
  };

  const updateOption = (questionId, optionIndex, value) => {
    setFormData(prev => ({
      ...prev,
      questions: prev.questions.map(q => 
        q.id === questionId 
          ? { 
              ...q, 
              options: q.options.map((opt, i) => i === optionIndex ? value : opt)
            }
          : q
      )
    }));
  };

  // Handle save
  const handleSave = async (isDraft = true) => {
    try {
      setLoading(true);
      const values = await form.validateFields();
      
      const surveyData = {
        ...formData,
        ...values,
        status: isDraft ? 'draft' : 'published'
      };

      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      message.success(isDraft ? 'Kh·∫£o s√°t ƒë√£ ƒë∆∞·ª£c l∆∞u nh√°p' : 'Kh·∫£o s√°t ƒë√£ ƒë∆∞·ª£c ph√°t h√†nh');
      navigate('/surveys');
    } catch (error) {
      message.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
    } finally {
      setLoading(false);
    }
  };

  // Render Step 1: Basic Info
  const renderBasicInfo = () => (
    <Card title="Th√¥ng tin c∆° b·∫£n" className="step-card">
      <Row gutter={[24, 24]}>
        <Col xs={24}>
          <Form.Item
            name="name"
            label="T√™n kh·∫£o s√°t"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n kh·∫£o s√°t' }]}
          >
            <Input 
              placeholder="VD: Kh·∫£o s√°t nhu c·∫ßu ƒë√†o t·∫°o Q4/2025"
              size="large"
            />
          </Form.Item>
        </Col>
        
        <Col xs={24}>
          <Form.Item
            name="description"
            label="M√¥ t·∫£"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£' }]}
          >
            <TextArea 
              rows={4}
              placeholder="M√¥ t·∫£ m·ª•c ƒë√≠ch v√† n·ªôi dung c·ªßa kh·∫£o s√°t..."
            />
          </Form.Item>
        </Col>
        
        <Col xs={24} md={12}>
          <Form.Item
            name="dateRange"
            label="Th·ªùi gian th·ª±c hi·ªán"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th·ªùi gian' }]}
          >
            <RangePicker 
              style={{ width: '100%' }}
              size="large"
              format="DD/MM/YYYY"
              placeholder={['Ng√†y b·∫Øt ƒë·∫ßu', 'Ng√†y k·∫øt th√∫c']}
            />
          </Form.Item>
        </Col>
        
        <Col xs={24} md={12}>
          <Form.Item
            name="category"
            label="Danh m·ª•c"
          >
            <Select placeholder="Ch·ªçn danh m·ª•c" size="large">
              <Option value="training">Nhu c·∫ßu ƒë√†o t·∫°o</Option>
              <Option value="satisfaction">H√†i l√≤ng nh√¢n vi√™n</Option>
              <Option value="evaluation">ƒê√°nh gi√° kh√≥a h·ªçc</Option>
              <Option value="feedback">Ph·∫£n h·ªìi chung</Option>
            </Select>
          </Form.Item>
        </Col>
      </Row>
    </Card>
  );

  // Handle import questions
  const handleImportQuestions = () => {
    Modal.info({
      title: 'Import c√¢u h·ªèi',
      width: 800,
      content: (
        <div style={{ marginTop: '16px' }}>
          <h4>Ch·ªçn ngu·ªìn import:</h4>
          <Space direction="vertical" style={{ width: '100%' }}>
            <Card 
              hoverable 
              onClick={() => showQuestionTemplates()}
              style={{ cursor: 'pointer' }}
            >
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <BookOutlined style={{ fontSize: '24px', marginRight: '12px', color: '#1890ff' }} />
                <div>
                  <div style={{ fontWeight: '600' }}>Template c√¢u h·ªèi</div>
                  <div style={{ color: '#666', fontSize: '14px' }}>S·ª≠ d·ª•ng b·ªô c√¢u h·ªèi c√≥ s·∫µn</div>
                </div>
              </div>
            </Card>
            
            <Card 
              hoverable 
              onClick={() => showExistingSurveys()}
              style={{ cursor: 'pointer' }}
            >
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <CopyOutlined style={{ fontSize: '24px', marginRight: '12px', color: '#52c41a' }} />
                <div>
                  <div style={{ fontWeight: '600' }}>Kh·∫£o s√°t c√≥ s·∫µn</div>
                  <div style={{ color: '#666', fontSize: '14px' }}>Copy c√¢u h·ªèi t·ª´ kh·∫£o s√°t kh√°c</div>
                </div>
              </div>
            </Card>
            
            <Card 
              hoverable 
              onClick={() => showFileImport()}
              style={{ cursor: 'pointer' }}
            >
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <UploadOutlined style={{ fontSize: '24px', marginRight: '12px', color: '#faad14' }} />
                <div>
                  <div style={{ fontWeight: '600' }}>Import t·ª´ file</div>
                  <div style={{ color: '#666', fontSize: '14px' }}>Upload file Excel/CSV</div>
                </div>
              </div>
            </Card>
          </Space>
        </div>
      ),
      onOk() {}
    });
  };

  // Show question templates
  const showQuestionTemplates = () => {
    const templates = [
      {
        id: 'training_needs',
        name: 'Nhu c·∫ßu ƒë√†o t·∫°o',
        description: 'B·ªô c√¢u h·ªèi chu·∫©n cho kh·∫£o s√°t nhu c·∫ßu ƒë√†o t·∫°o',
        questions: [
          {
            type: 'multiple_choice',
            text: 'B·∫°n mu·ªën ƒë∆∞·ª£c ƒë√†o t·∫°o v·ªÅ lƒ©nh v·ª±c n√†o?',
            options: ['K·ªπ nƒÉng l√£nh ƒë·∫°o', 'K·ªπ thu·∫≠t chuy√™n m√¥n', 'Ngo·∫°i ng·ªØ', 'Tin h·ªçc vƒÉn ph√≤ng'],
            required: true
          },
          {
            type: 'rating',
            text: 'ƒê√°nh gi√° m·ª©c ƒë·ªô c·∫ßn thi·∫øt c·ªßa vi·ªác ƒë√†o t·∫°o?',
            scale: 5,
            required: true
          }
        ]
      },
      {
        id: 'satisfaction',
        name: 'H√†i l√≤ng nh√¢n vi√™n',
        description: 'B·ªô c√¢u h·ªèi ƒë√°nh gi√° m·ª©c ƒë·ªô h√†i l√≤ng',
        questions: [
          {
            type: 'rating',
            text: 'M·ª©c ƒë·ªô h√†i l√≤ng v·ªÅ m√¥i tr∆∞·ªùng l√†m vi·ªác',
            scale: 5,
            required: true
          },
          {
            type: 'multiple_choice',
            text: 'Y·∫øu t·ªë n√†o b·∫°n mu·ªën c·∫£i thi·ªán nh·∫•t?',
            options: ['L∆∞∆°ng th∆∞·ªüng', 'Ph√∫c l·ª£i', 'M√¥i tr∆∞·ªùng', 'C∆° h·ªôi thƒÉng ti·∫øn'],
            required: true
          }
        ]
      }
    ];

    Modal.confirm({
      title: 'Ch·ªçn template c√¢u h·ªèi',
      width: 700,
      content: (
        <div style={{ marginTop: '16px' }}>
          {templates.map(template => (
            <Card 
              key={template.id}
              style={{ marginBottom: '12px', cursor: 'pointer' }}
              hoverable
              onClick={() => importFromTemplate(template)}
            >
              <div>
                <div style={{ fontWeight: '600', marginBottom: '4px' }}>{template.name}</div>
                <div style={{ color: '#666', fontSize: '14px', marginBottom: '8px' }}>
                  {template.description}
                </div>
                <div style={{ fontSize: '12px', color: '#999' }}>
                  {template.questions.length} c√¢u h·ªèi
                </div>
              </div>
            </Card>
          ))}
        </div>
      ),
      onOk() {}
    });
  };

  // Import from template
  const importFromTemplate = (template) => {
    const importedQuestions = template.questions.map(q => ({
      ...q,
      id: Date.now() + Math.random()
    }));
    
    setFormData(prev => ({
      ...prev,
      questions: [...prev.questions, ...importedQuestions]
    }));
    
    message.success(`ƒê√£ import ${importedQuestions.length} c√¢u h·ªèi t·ª´ template "${template.name}"`);
    Modal.destroyAll();
  };

  // Show existing surveys
  const showExistingSurveys = () => {
    // Mock data - in real app, fetch from API
    const existingSurveys = [
      {
        id: 1,
        name: 'Kh·∫£o s√°t nhu c·∫ßu ƒë√†o t·∫°o Q3/2025',
        questionCount: 5,
        createdBy: 'Nguy·ªÖn VƒÉn A'
      },
      {
        id: 2,
        name: 'Kh·∫£o s√°t h√†i l√≤ng nh√¢n vi√™n 2025',
        questionCount: 8,
        createdBy: 'Tr·∫ßn Th·ªã B'
      }
    ];

    Modal.confirm({
      title: 'Ch·ªçn kh·∫£o s√°t ƒë·ªÉ copy c√¢u h·ªèi',
      width: 700,
      content: (
        <div style={{ marginTop: '16px' }}>
          {existingSurveys.map(survey => (
            <Card 
              key={survey.id}
              style={{ marginBottom: '12px', cursor: 'pointer' }}
              hoverable
              onClick={() => importFromSurvey(survey)}
            >
              <div>
                <div style={{ fontWeight: '600', marginBottom: '4px' }}>{survey.name}</div>
                <div style={{ color: '#666', fontSize: '14px' }}>
                  T·∫°o b·ªüi: {survey.createdBy} ‚Ä¢ {survey.questionCount} c√¢u h·ªèi
                </div>
              </div>
            </Card>
          ))}
        </div>
      ),
      onOk() {}
    });
  };

  // Import from existing survey
  const importFromSurvey = (survey) => {
    // Mock questions - in real app, fetch from API
    const mockQuestions = [
      {
        type: 'multiple_choice',
        text: 'C√¢u h·ªèi m·∫´u t·ª´ kh·∫£o s√°t kh√°c',
        options: ['Option 1', 'Option 2', 'Option 3'],
        required: true
      }
    ];

    const importedQuestions = mockQuestions.map(q => ({
      ...q,
      id: Date.now() + Math.random()
    }));
    
    setFormData(prev => ({
      ...prev,
      questions: [...prev.questions, ...importedQuestions]
    }));
    
    message.success(`ƒê√£ import c√¢u h·ªèi t·ª´ "${survey.name}"`);
    Modal.destroyAll();
  };

  // Show file import
  const showFileImport = () => {
    Modal.info({
      title: 'Import t·ª´ file',
      content: (
        <div style={{ marginTop: '16px' }}>
          <p>T√≠nh nƒÉng import t·ª´ file Excel/CSV s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo.</p>
          <p>ƒê·ªãnh d·∫°ng file s·∫Ω bao g·ªìm:</p>
          <ul>
            <li>Lo·∫°i c√¢u h·ªèi</li>
            <li>N·ªôi dung c√¢u h·ªèi</li>
            <li>C√°c l·ª±a ch·ªçn (n·∫øu c√≥)</li>
            <li>B·∫Øt bu·ªôc hay kh√¥ng</li>
          </ul>
        </div>
      )
    });
  };

  // Render Step 2: Questions
  const renderQuestions = () => (
    <Card 
      title="C√¢u h·ªèi kh·∫£o s√°t" 
      className="step-card"
      extra={
        <Space>
          <Button 
            icon={<DownloadOutlined />}
            onClick={handleImportQuestions}
          >
            Import c√¢u h·ªèi
          </Button>
          <Button 
            type="primary" 
            icon={<PlusOutlined />}
            onClick={addQuestion}
          >
            Th√™m c√¢u h·ªèi
          </Button>
        </Space>
      }
    >
      <Space direction="vertical" style={{ width: '100%' }} size="large">
        {formData.questions.map((question, index) => (
          <Card 
            key={question.id}
            size="small"
            title={`C√¢u h·ªèi ${index + 1}`}
            extra={
              formData.questions.length > 1 && (
                <Button 
                  type="text" 
                  danger 
                  icon={<DeleteOutlined />}
                  onClick={() => removeQuestion(question.id)}
                />
              )
            }
          >
            <Row gutter={[16, 16]}>
              <Col xs={24} md={8}>
                <Select
                  value={question.type}
                  onChange={(value) => updateQuestion(question.id, 'type', value)}
                  style={{ width: '100%' }}
                >
                  {questionTypes.map(type => (
                    <Option key={type.value} value={type.value}>
                      {type.icon} {type.label}
                    </Option>
                  ))}
                </Select>
              </Col>
              
              <Col xs={24} md={16}>
                <Input
                  placeholder="Nh·∫≠p n·ªôi dung c√¢u h·ªèi..."
                  value={question.text}
                  onChange={(e) => updateQuestion(question.id, 'text', e.target.value)}
                />
              </Col>
              
              <Col xs={24}>
                <Checkbox
                  checked={question.required}
                  onChange={(e) => updateQuestion(question.id, 'required', e.target.checked)}
                >
                  B·∫Øt bu·ªôc tr·∫£ l·ªùi
                </Checkbox>
              </Col>
              
              {/* Options for multiple choice questions */}
              {(question.type === 'multiple_choice' || question.type === 'single_choice') && (
                <Col xs={24}>
                  <div style={{ marginTop: '12px' }}>
                    <div style={{ marginBottom: '8px', fontWeight: '500' }}>C√°c l·ª±a ch·ªçn:</div>
                    {question.options.map((option, optionIndex) => (
                      <div key={optionIndex} style={{ display: 'flex', marginBottom: '8px' }}>
                        <Input
                          placeholder={`L·ª±a ch·ªçn ${optionIndex + 1}`}
                          value={option}
                          onChange={(e) => updateOption(question.id, optionIndex, e.target.value)}
                          style={{ marginRight: '8px' }}
                        />
                        {question.options.length > 1 && (
                          <Button 
                            type="text" 
                            danger 
                            icon={<DeleteOutlined />}
                            onClick={() => removeOption(question.id, optionIndex)}
                          />
                        )}
                      </div>
                    ))}
                    <Button 
                      type="dashed" 
                      icon={<PlusOutlined />}
                      onClick={() => addOption(question.id)}
                      style={{ width: '100%' }}
                    >
                      Th√™m l·ª±a ch·ªçn
                    </Button>
                  </div>
                </Col>
              )}
              
              {/* Scale for rating questions */}
              {question.type === 'rating' && (
                <Col xs={24}>
                  <div style={{ marginTop: '12px' }}>
                    <span style={{ marginRight: '12px' }}>Thang ƒëi·ªÉm:</span>
                    <Radio.Group
                      value={question.scale || 5}
                      onChange={(e) => updateQuestion(question.id, 'scale', e.target.value)}
                    >
                      <Radio value={3}>1-3</Radio>
                      <Radio value={5}>1-5</Radio>
                      <Radio value={10}>1-10</Radio>
                    </Radio.Group>
                  </div>
                </Col>
              )}
            </Row>
          </Card>
        ))}
      </Space>
    </Card>
  );

  // Render Step 3: Audience
  const renderAudience = () => (
    <Card title="ƒê·ªëi t∆∞·ª£ng tham gia" className="step-card">
      <Row gutter={[24, 24]}>
        <Col xs={24} md={12}>
          <Form.Item
            name={['audience', 'departments']}
            label="Ph√≤ng ban"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ph√≤ng ban' }]}
          >
            <Select
              mode="multiple"
              placeholder="Ch·ªçn ph√≤ng ban"
              size="large"
              style={{ width: '100%' }}
            >
              {departments.map(dept => (
                <Option key={dept.id} value={dept.name}>
                  {dept.name} ({dept.employeeCount} ng∆∞·ªùi)
                </Option>
              ))}
            </Select>
          </Form.Item>
        </Col>
        
        <Col xs={24} md={12}>
          <Form.Item
            name={['audience', 'positions']}
            label="V·ªã tr√≠"
          >
            <Select
              mode="multiple"
              placeholder="Ch·ªçn v·ªã tr√≠ (t√πy ch·ªçn)"
              size="large"
              style={{ width: '100%' }}
            >
              <Option value="Nh√¢n vi√™n">Nh√¢n vi√™n</Option>
              <Option value="Tr∆∞·ªüng nh√≥m">Tr∆∞·ªüng nh√≥m</Option>
              <Option value="Tr∆∞·ªüng ph√≤ng">Tr∆∞·ªüng ph√≤ng</Option>
              <Option value="Ph√≥ ph√≤ng">Ph√≥ ph√≤ng</Option>
              <Option value="Gi√°m ƒë·ªëc">Gi√°m ƒë·ªëc</Option>
            </Select>
          </Form.Item>
        </Col>
        
        <Col xs={24}>
          <Form.Item
            name={['audience', 'specificUsers']}
            label="Ng∆∞·ªùi d√πng c·ª• th·ªÉ"
          >
            <Select
              mode="multiple"
              placeholder="Ch·ªçn ng∆∞·ªùi d√πng c·ª• th·ªÉ (t√πy ch·ªçn)"
              size="large"
              style={{ width: '100%' }}
              showSearch
              filterOption={(input, option) =>
                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
              }
            >
              <Option value="user1">Nguy·ªÖn VƒÉn A - Ph√≤ng K·ªπ thu·∫≠t</Option>
              <Option value="user2">Tr·∫ßn Th·ªã B - Ph√≤ng Kinh doanh</Option>
              <Option value="user3">L√™ VƒÉn C - Ph√≤ng Marketing</Option>
              <Option value="user4">Ph·∫°m Th·ªã D - Ph√≤ng Nh√¢n s·ª±</Option>
            </Select>
          </Form.Item>
        </Col>
        
        <Col xs={24}>
          <div className="audience-summary">
            <h4>T√≥m t·∫Øt ƒë·ªëi t∆∞·ª£ng:</h4>
            <div className="summary-tags">
              <Tag color="blue">∆Ø·ªõc t√≠nh: ~150 ng∆∞·ªùi</Tag>
              <Tag color="green">3 ph√≤ng ban</Tag>
              <Tag color="orange">T·∫•t c·∫£ v·ªã tr√≠</Tag>
            </div>
          </div>
        </Col>
      </Row>
    </Card>
  );

  return (
    <div className="survey-form-page">
      {/* Header */}
      <div className="page-header">
        <div className="page-title">
          <Button 
            type="text" 
            icon={<ArrowLeftOutlined />}
            onClick={() => navigate('/surveys')}
            style={{ marginRight: '12px' }}
          />
          <div>
            <h2>{isEdit ? 'Ch·ªânh s·ª≠a kh·∫£o s√°t' : 'T·∫°o kh·∫£o s√°t m·ªõi'}</h2>
            <p>T·∫°o kh·∫£o s√°t theo 3 b∆∞·ªõc ƒë∆°n gi·∫£n</p>
          </div>
        </div>
      </div>

      {/* Steps */}
      <Card className="steps-card">
        <Steps current={currentStep} type="navigation">
          {steps.map((step, index) => (
            <Step
              key={index}
              title={step.title}
              description={step.description}
              icon={step.icon}
            />
          ))}
        </Steps>
      </Card>

      {/* Form Content */}
      <Form
        form={form}
        layout="vertical"
        initialValues={formData}
        onValuesChange={(changedValues, allValues) => {
          setFormData(prev => ({ ...prev, ...allValues }));
        }}
      >
        {currentStep === 0 && renderBasicInfo()}
        {currentStep === 1 && renderQuestions()}
        {currentStep === 2 && renderAudience()}
      </Form>

      {/* Actions */}
      <Card className="actions-card">
        <div className="form-actions">
          <div className="left-actions">
            {currentStep > 0 && (
              <Button onClick={prevStep}>
                Quay l·∫°i
              </Button>
            )}
          </div>
          
          <div className="right-actions">
            <Space>
              <Button 
                icon={<SaveOutlined />}
                onClick={() => handleSave(true)}
                loading={loading}
              >
                L∆∞u nh√°p
              </Button>
              
              {currentStep < steps.length - 1 ? (
                <Button type="primary" onClick={nextStep}>
                  Ti·∫øp theo
                </Button>
              ) : (
                <Button 
                  type="primary" 
                  icon={<SendOutlined />}
                  onClick={() => handleSave(false)}
                  loading={loading}
                >
                  Ph√°t h√†nh kh·∫£o s√°t
                </Button>
              )}
            </Space>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default SurveyForm;
